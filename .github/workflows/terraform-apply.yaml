name: Terraform Apply

permissions:
  id-token: write
  contents: read
  pull-requests: write  # Allow commenting on PRs
## ==============================================
## Section 1: SCHEDULING AND TRIGGERS
## ==============================================
on:
  # Trigger on PR events
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main      # PR to main
      - develop   # PR to develop
      - '**'      # Any other PR
  
  # Trigger on push to dev branches
  push:
    branches:
      - 'dev/**'  # Push to dev/* branches = dev deployment
  
  # Manual trigger via GitHub UI (dev only)
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev only for manual trigger)'
        required: true
        type: choice
        options:
          - dev
        default: dev


# Environment variables
env:
  TF_VERSION: '1.5.7'
  
jobs:
  # Job 1: Plan
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    
    # Set environment based on trigger
    env:
      ENVIRONMENT: ${{ 
        github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
        github.event_name == 'schedule' && 'prod' ||
        (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main') && 'prod' ||
        (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'develop') && 'stage' ||
        (github.event_name == 'pull_request' && !github.event.pull_request.merged && github.base_ref == 'main') && 'prod' ||
        (github.event_name == 'pull_request' && !github.event.pull_request.merged && github.base_ref == 'develop') && 'stage' ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/dev/')) && 'dev' ||
        'dev' }}
    
    outputs:
      environment: ${{ env.ENVIRONMENT }}
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
    
    defaults:
      run:
        shell: bash
        working-directory: environments/${{ env.ENVIRONMENT }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      ## ==============================================
      ## Section 2: GOOGLE CLOUD AUTHENTICATION WITH WIF
      ## ==============================================
      # Debug: Check environment (TEMPORARY: hardcoded values)
      - name: Debug WIF Configuration
        run: |
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "TEMPORARY: Using hardcoded project numbers for debugging"
          if [[ "${{ env.ENVIRONMENT }}" == "dev" ]]; then
            echo "Dev Project Number: 4275271155"
          elif [[ "${{ env.ENVIRONMENT }}" == "stage" ]]; then
            echo "Stage Project Number: 729631533282"
          else
            echo "Prod Project Number: 391673587007"
          fi
          echo "Project Prefix: mycompany-mlops"
      
      # Set WIF provider based on environment
      - name: Set WIF Provider
        run: |
          # TEMPORARY: Hardcoded project numbers for debugging
          if [[ "${{ env.ENVIRONMENT }}" == "dev" ]]; then
            echo "WIF_PROVIDER=projects/4275271155/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT=terraform-dev@mycompany-mlops-dev.iam.gserviceaccount.com" >> $GITHUB_ENV
          elif [[ "${{ env.ENVIRONMENT }}" == "stage" ]]; then
            echo "WIF_PROVIDER=projects/729631533282/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT=terraform-stage@mycompany-mlops-stage.iam.gserviceaccount.com" >> $GITHUB_ENV
          else
            echo "WIF_PROVIDER=projects/391673587007/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT=terraform-prod@mycompany-mlops-prod.iam.gserviceaccount.com" >> $GITHUB_ENV
          fi
          
          # Debug: Print the constructed values (safely)
          echo "Constructed WIF_PROVIDER path (will be used for auth):"
          echo "  Pool: github-pool"
          echo "  Provider: github-provider"
          echo "Constructed SERVICE_ACCOUNT: $SERVICE_ACCOUNT"
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: 'access_token'
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      ## ==============================================
      ## Section 3: TERRAFORM CHECKS AND PLAN
      ## ==============================================
      
      # Check formatting
      - name: Terraform Format Check
        id: fmt
        run: |
          terraform fmt -check -recursive
        continue-on-error: true
      
      # Initialize Terraform
      - name: Terraform Init
        id: init
        run: |
          echo "=== Debug: Pre-init checks ==="
          echo "Current directory: $(pwd)"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo ""
          
          echo "=== Checking backend configuration ==="
          if [ -f backend.tf ]; then
            echo "backend.tf contents:"
            cat backend.tf
          else
            echo "ERROR: backend.tf not found!"
          fi
          echo ""
          
          echo "=== Checking authentication ==="
          echo "WIF_PROVIDER env var: ${WIF_PROVIDER}"
          echo "SERVICE_ACCOUNT env var: ${SERVICE_ACCOUNT}"
          echo "GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}"
          echo ""
          
          echo "=== Testing gcloud authentication ==="
          gcloud auth list
          echo ""
          
          echo "=== Testing bucket access directly ==="
          BUCKET_NAME=$(grep bucket backend.tf | cut -d'"' -f2)
          echo "Bucket from backend.tf: $BUCKET_NAME"
          echo "Attempting to list bucket contents..."
          if gsutil ls "gs://${BUCKET_NAME}/" 2>&1; then
            echo "‚úì Bucket access successful"
          else
            echo "‚úó Bucket access failed"
          fi
          echo ""
          
          echo "=== Running terraform init ==="
          terraform init -no-color
      
      # Validate configuration
      - name: Terraform Validate
        id: validate
        run: |
          terraform validate -no-color
      
      # Generate plan
      - name: Terraform Plan
        id: plan
        env:
          # TEMPORARY: Hardcoded values for debugging
          TF_VAR_project_id: ${{ env.ENVIRONMENT == 'dev' && 'mycompany-mlops-dev' || env.ENVIRONMENT == 'stage' && 'mycompany-mlops-stage' || 'mycompany-mlops-prod' }}
          TF_VAR_region: ${{ env.ENVIRONMENT == 'dev' && 'us-central1' || env.ENVIRONMENT == 'stage' && 'us-central1' || 'us-central1' }}
          TF_VAR_zone: ${{ env.ENVIRONMENT == 'dev' && 'us-central1-a' || env.ENVIRONMENT == 'stage' && 'us-central1-a' || 'us-central1-a' }}
          # TEMPORARY: Hardcoded empty values for optional variables
          TF_VAR_dataset_owners: '[]'
          TF_VAR_dataset_writers: '[]'
          TF_VAR_dataset_readers: '[]'
          TF_VAR_ml_team_group: ''
          TF_VAR_analysts_group: ''
        run: |
          set +e
          terraform plan -no-color -out=tfplan -detailed-exitcode
          exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          # Exit codes: 0 = no changes, 1 = error, 2 = changes present
          if [ $exitcode -eq 1 ]; then
            echo "Terraform plan failed with error"
            exit 1
          fi
          exit 0
      
      # Save plan for apply job (only if plan succeeded)
      - name: Upload Plan
        if: steps.plan.outputs.exitcode != '1'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.ENVIRONMENT }}
          path: environments/${{ env.ENVIRONMENT }}/tfplan
          retention-days: 1
      
      # Comment on PR if this is from a pull request
      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan for ${{ env.ENVIRONMENT }} environment</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            **Target Environment:** \`${{ env.ENVIRONMENT }}\`
            **Plan shows changes that will be applied when this PR is merged**
            
            *Triggered by: @${{ github.actor }}, Action: ${{ github.event_name }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
  # Job 2: Apply (only runs if plan succeeds and conditions are met)
  terraform-apply:
    name: "Terraform Apply"
    needs: terraform-plan
    runs-on: ubuntu-latest
    
    # Only run apply for specific conditions
    if: |
      needs.terraform-plan.outputs.plan-exitcode == '2' &&
      (
        (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main') ||
        (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'develop') ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/dev/')) ||
        (github.event_name == 'workflow_dispatch') ||
        (github.event_name == 'schedule')
      )
    
    env:
      ENVIRONMENT: ${{ needs.terraform-plan.outputs.environment }}
    
    defaults:
      run:
        shell: bash
        working-directory: environments/${{ env.ENVIRONMENT }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      # Re-authenticate (new job needs fresh auth)
      # Debug: Check if secrets are properly set
      - name: Debug WIF Configuration (Apply Job)
        run: |
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Checking if project number secret exists..."
          if [[ "${{ env.ENVIRONMENT }}" == "dev" ]]; then
            if [[ -z "${{ secrets.GCP_DEV_PROJECT_NUMBER }}" ]]; then
              echo "ERROR: GCP_DEV_PROJECT_NUMBER secret is not set or empty!"
              exit 1
            else
              PROJECT_NUM="${{ secrets.GCP_DEV_PROJECT_NUMBER }}"
              echo "GCP_DEV_PROJECT_NUMBER is set (length: ${#PROJECT_NUM})"
              echo "Project Number starts with: ${PROJECT_NUM:0:4}***"
            fi
          elif [[ "${{ env.ENVIRONMENT }}" == "stage" ]]; then
            if [[ -z "${{ secrets.GCP_STAGE_PROJECT_NUMBER }}" ]]; then
              echo "ERROR: GCP_STAGE_PROJECT_NUMBER secret is not set or empty!"
              exit 1
            else
              PROJECT_NUM="${{ secrets.GCP_STAGE_PROJECT_NUMBER }}"
              echo "GCP_STAGE_PROJECT_NUMBER is set (length: ${#PROJECT_NUM})"
              echo "Project Number starts with: ${PROJECT_NUM:0:4}***"
            fi
          else
            if [[ -z "${{ secrets.GCP_PROD_PROJECT_NUMBER }}" ]]; then
              echo "ERROR: GCP_PROD_PROJECT_NUMBER secret is not set or empty!"
              exit 1
            else
              PROJECT_NUM="${{ secrets.GCP_PROD_PROJECT_NUMBER }}"
              echo "GCP_PROD_PROJECT_NUMBER is set (length: ${#PROJECT_NUM})"
              echo "Project Number starts with: ${PROJECT_NUM:0:4}***"
            fi
          fi
          
          if [[ -z "${{ secrets.GCP_PROJECT_PREFIX }}" ]]; then
            echo "ERROR: GCP_PROJECT_PREFIX secret is not set or empty!"
            exit 1
          else
            echo "GCP_PROJECT_PREFIX is set: ${{ secrets.GCP_PROJECT_PREFIX }}"
          fi
      
      # Set WIF provider based on environment
      - name: Set WIF Provider
        run: |
          # TEMPORARY: Hardcoded project numbers for debugging
          if [[ "${{ env.ENVIRONMENT }}" == "dev" ]]; then
            echo "WIF_PROVIDER=projects/4275271155/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT=terraform-dev@mycompany-mlops-dev.iam.gserviceaccount.com" >> $GITHUB_ENV
          elif [[ "${{ env.ENVIRONMENT }}" == "stage" ]]; then
            echo "WIF_PROVIDER=projects/729631533282/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT=terraform-stage@mycompany-mlops-stage.iam.gserviceaccount.com" >> $GITHUB_ENV
          else
            echo "WIF_PROVIDER=projects/391673587007/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT=terraform-prod@mycompany-mlops-prod.iam.gserviceaccount.com" >> $GITHUB_ENV
          fi
          
          # Debug: Print the constructed values (safely)
          echo "Constructed WIF_PROVIDER path (will be used for auth):"
          echo "  Pool: github-pool"
          echo "  Provider: github-provider"
          echo "Constructed SERVICE_ACCOUNT: $SERVICE_ACCOUNT"
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: 'access_token'
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      # Download the plan
      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ env.ENVIRONMENT }}
          path: environments/${{ env.ENVIRONMENT }}
      
      # Initialize Terraform
      - name: Terraform Init
        run: |
          echo "=== Debug: Pre-init checks (Apply Job) ==="
          echo "Current directory: $(pwd)"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo ""
          
          echo "=== Checking backend configuration ==="
          if [ -f backend.tf ]; then
            echo "backend.tf contents:"
            cat backend.tf
          else
            echo "ERROR: backend.tf not found!"
          fi
          echo ""
          
          echo "=== Checking authentication ==="
          echo "WIF_PROVIDER env var: ${WIF_PROVIDER}"
          echo "SERVICE_ACCOUNT env var: ${SERVICE_ACCOUNT}"
          echo "GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}"
          echo ""
          
          echo "=== Testing gcloud authentication ==="
          gcloud auth list
          echo ""
          
          echo "=== Testing bucket access directly ==="
          BUCKET_NAME=$(grep bucket backend.tf | cut -d'"' -f2)
          echo "Bucket from backend.tf: $BUCKET_NAME"
          echo "Attempting to list bucket contents..."
          if gsutil ls "gs://${BUCKET_NAME}/" 2>&1; then
            echo "‚úì Bucket access successful"
          else
            echo "‚úó Bucket access failed"
          fi
          echo ""
          
          echo "=== Running terraform init ==="
          terraform init -no-color
      
      # Apply the plan
      - name: Terraform Apply
        env:
          # TEMPORARY: Hardcoded values for debugging
          TF_VAR_project_id: ${{ env.ENVIRONMENT == 'dev' && 'mycompany-mlops-dev' || env.ENVIRONMENT == 'stage' && 'mycompany-mlops-stage' || 'mycompany-mlops-prod' }}
          TF_VAR_region: ${{ env.ENVIRONMENT == 'dev' && 'us-central1' || env.ENVIRONMENT == 'stage' && 'us-central1' || 'us-central1' }}
          TF_VAR_zone: ${{ env.ENVIRONMENT == 'dev' && 'us-central1-a' || env.ENVIRONMENT == 'stage' && 'us-central1-a' || 'us-central1-a' }}
          # TEMPORARY: Hardcoded empty values for optional variables
          TF_VAR_dataset_owners: '[]'
          TF_VAR_dataset_writers: '[]'
          TF_VAR_dataset_readers: '[]'
          TF_VAR_ml_team_group: ''
          TF_VAR_analysts_group: ''
        run: |
          terraform apply -no-color -auto-approve tfplan
      
      # Output summary
      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Successfully applied" >> $GITHUB_STEP_SUMMARY